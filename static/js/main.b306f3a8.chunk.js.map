{"version":3,"sources":["../node_modules/sentiment/languages sync /^/.*/index$","components/Navbar.js","OCR.js","TTS.js","TextAnalyzer.js","App.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","Navbar","props","console","log","Fragment","className","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","to","Home","useState","OCRImage","setOCRImage","OCRProgress","setOCRProgress","OCRButtonDisabled","setOCRButtonDisabled","OCRText","setOCRText","htmlFor","style","fontSize","accept","onChange","URL","createObjectURL","target","files","src","alt","onClick","Tesseract","recognize","logger","m","status","progress","then","text","data","disabled","Math","round","complete","ProgressBar","width","TTS","textData","setTextData","voiceList","setVoiceList","playStatus","setPlayStatus","pauseStatus","setPauseStatus","useEffect","Promise","reject","synth","window","speechSynthesis","setInterval","getVoices","length","clearInterval","voices","cancelText","cancel","rows","value","pause","resume","speech","SpeechSynthesisUtterance","onstart","myTimer","onend","voice","find","element","lang","volume","rate","pitch","speak","sentiment","Sentiment","TextAnalyzer","sentimentScore","setSentimentScore","sentimentType","setSentimentType","sentimentPostive","setSentimentPositive","sentimentNegative","setSentimentNegative","sentimentObj","analyze","score","positive","negative","getSentiment","App","marginTop","path","exact","component","OCR","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b306f3a8.chunk.js","sourcesContent":["var map = {\n\t\"./en/index\": 35\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 91;","import React, {useState} from 'react';\r\nimport * as FaIcons from \"react-icons/fa\";\r\nimport { Link } from 'react-router-dom';\r\nimport './Navbar.css';\r\n\r\n\r\nfunction Navbar(props) {\r\nconsole.log(props)\r\n\r\n    return (\r\n        <React.Fragment>\r\n            \r\n\r\n            <nav className=\"navbar navbar-expand-lg navbar-light bg-nav p-3 fixed-top shadow\">\r\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n              <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n              <ul className=\"navbar-nav m-auto text-center\">\r\n                \r\n                <li className=\"nav-item mr-3 mt-1\">\r\n                  <Link to=\"/ocr\" className=\"nav-links\">\r\n                      <button className=\"btn btn-info\">Optical Character Recognition</button>\r\n                    </Link>\r\n                </li>\r\n                <li className=\"nav-item mr-3 mt-1\">\r\n                  <Link to=\"/textAnalyzer\" className=\"nav-links\">\r\n                      <button className=\"btn btn-info\">Text Analyzer</button>\r\n                    </Link>\r\n                </li>\r\n                <li className=\"nav-item mr-3 mt-1\">\r\n                  <Link to=\"/tts\" className=\"nav-links\">\r\n                    <button className=\"btn btn-info\">Text To Speech</button>\r\n                  </Link>\r\n                \r\n                </li>\r\n               \r\n               \r\n              </ul>\r\n\r\n            </div>\r\n          </nav>\r\n            \r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n","import React, { useState } from 'react';\r\nimport { VscDiffAdded } from \"react-icons/vsc\";\r\nimport Tesseract from 'tesseract.js';\r\n\r\n\r\n\r\nfunction Home() {\r\n    const [OCRImage, setOCRImage] = useState(\"\");\r\n    const [OCRProgress, setOCRProgress] = useState(\"\");\r\n    const [OCRButtonDisabled, setOCRButtonDisabled] = useState(false);\r\n    const [OCRText, setOCRText] = useState(\"\");\r\n   \r\n\r\n    const callOCR = () => {\r\n        setOCRButtonDisabled(true);\r\n        Tesseract.recognize(\r\n            OCRImage,\r\n            'eng',\r\n            { logger: m => {\r\n                console.log(m)\r\n                if(m.status === 'recognizing text')\r\n                    setOCRProgress(m.progress);\r\n                }\r\n            }\r\n          ).then(({ data: { text } }) => {\r\n            console.log(text);\r\n            setOCRText(text);\r\n            setOCRButtonDisabled(false);\r\n            setOCRProgress(\"\");\r\n          })\r\n          \r\n    }\r\n\r\n    return (\r\n        <div className=\"container text-center mt-5\">\r\n            <h2>Optical Character Recognition App</h2>\r\n            <p>Add a text image and convert it into actual text.</p>\r\n            <label htmlFor=\"file-upload\">\r\n                <span className=\"text-info\" style={{fontSize:'60px'}}><VscDiffAdded /></span>\r\n            </label>\r\n            <br />\r\n            <input id=\"file-upload\" type=\"file\" accept=\"image/*\" className=\"\" onChange={e => setOCRImage(URL.createObjectURL(e.target.files[0]))}/>\r\n\r\n            <img src={OCRImage} alt=\"\" className=\"img-fluid rounded img-thumbnail shadow w-50\"/>\r\n            <br />\r\n            {OCRImage !== \"\"  ? <button className=\"btn btn-primary mt-5 shadow\" onClick={callOCR} disabled={OCRButtonDisabled}>Convert</button> : \"\"}\r\n\r\n            {OCRProgress !== \"\" ? <><p className=\"mt-3\">{Math.round(OCRProgress*100)}%</p>\r\n            <h4 className=\"w-50 m-auto\"><ProgressBar complete={OCRProgress}/></h4></> : \"\"}\r\n\r\n            {OCRText !== \"\" ? <p className=\"mt-5 shadow p-3\">{OCRText}</p> : \"\"}\r\n            \r\n            \r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home\r\n\r\n\r\nconst ProgressBar = ({complete}) => {\r\n    complete = complete*100;\r\n    return(\r\n        <div className=\"progressBarContainer\">\r\n            <span className=\"progressBar\" style={{width : complete+'%' }}></span>\r\n        </div>\r\n    )\r\n}","import React, {useState, useEffect} from 'react'\r\nimport * as FaIcons from \"react-icons/fa\";\r\n\r\n// Google Chrome speech API allows 15sec of TTS, so to overcome it used a setInterval Function that pauses and resumes to refresh the 15 sec counter\r\n\r\nfunction TTS() {\r\n\r\n    const [textData, setTextData] = useState(\"\");\r\n    const [voiceList, setVoiceList] = useState(\"\"); //Store the different voices in voiceList array\r\n\r\n    const [playStatus, setPlayStatus] = useState(false);\r\n    const [pauseStatus, setPauseStatus] = useState(null);\r\n\r\n    useEffect(() => {\r\n        \r\n        console.log('mount it!');\r\n        let s = setSpeech();\r\n        s.then((voices) => {\r\n            console.log(voices);\r\n            setVoiceList(voices);\r\n        });\r\n    }, []);\r\n    \r\n    const playText = () => {\r\n        if(textData.length === 0) {\r\n            console.log(\"No text to be played\");\r\n            return false;\r\n        }\r\n        window.speechSynthesis.cancel();\r\n        let speech = new SpeechSynthesisUtterance();\r\n        speech.onstart = ()=>{\r\n            console.log(\"started\");\r\n            setPlayStatus(true);\r\n            setPauseStatus(false);\r\n            setInterval(myTimer, 10000);\r\n        }\r\n        \r\n        speech.onend = () => {\r\n            clearInterval(myTimer);\r\n            console.log(\"ENDED\");\r\n            cancelText();\r\n        }\r\n        // speech.lang = 'en-US';\r\n        speech.voice = voiceList.find(element => element.lang === 'en-GB');\r\n        console.log(\"VOICE used ---> \", speech.voice)\r\n        speech.text = textData;\r\n        speech.volume = 1;\r\n        speech.rate = 1;\r\n        speech.pitch = 1;                \r\n    \r\n        console.log(speech)\r\n        window.speechSynthesis.speak(speech);\r\n      \r\n        \r\n        \r\n    }\r\n\r\n    const pauseText = () => {\r\n        setPauseStatus(true);\r\n        window.speechSynthesis.pause();\r\n    }\r\n\r\n    const resumeText = () => {\r\n        setPauseStatus(false);\r\n        window.speechSynthesis.resume();\r\n    }\r\n\r\n    const cancelText = () => {\r\n        window.speechSynthesis.cancel();\r\n        setPlayStatus(false);\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"container text-center mt-5\">\r\n            <h2>Text to Speech in English</h2>\r\n            <p>Enter your text and hit the Play button.</p>\r\n            <div className=\"form-group mt-5\">\r\n                <textarea className=\"form-control w-75 m-auto\" rows=\"7\" onChange={e=>setTextData(e.target.value)}></textarea>\r\n\r\n            {/* when playStatus is true then only show the respective pause and resume button */}\r\n            {playStatus === true ? \r\n                    pauseStatus === false ? <button className=\"btn btn-info mt-4\" onClick={pauseText}> <FaIcons.FaPause /></button> : <button className=\"btn btn-info mt-4\" onClick={resumeText}> <FaIcons.FaPlay /></button>\r\n                 : \r\n                 \" \"}\r\n\r\n    {/* If playStatus is true then show the cancel button or else show the play button */}\r\n                {playStatus === true ? \r\n                    <button className=\"btn btn-info mt-4 ml-2\" onClick={cancelText}> <FaIcons.FaStop /></button> \r\n                    : <button className=\"btn btn-info mt-4 ml-2\" onClick={playText}><FaIcons.FaPlay /></button>}\r\n            \r\n            </div>\r\n         \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TTS\r\n\r\n// Returns a promise when the getVoices() array is loaded. \r\nfunction setSpeech() {\r\n    return new Promise(\r\n        function (resolve, reject) {\r\n            let synth = window.speechSynthesis;\r\n            let id;\r\n\r\n            id = setInterval(() => {\r\n                if (synth.getVoices().length !== 0) {\r\n                    resolve(synth.getVoices());\r\n                    clearInterval(id);\r\n                }\r\n                \r\n            }, 10);\r\n        }\r\n    )\r\n}\r\n\r\nfunction myTimer() {\r\n    window.speechSynthesis.pause();\r\n    window.speechSynthesis.resume();\r\n    // myTimeout = setTimeout(myTimer, 10000);\r\n}","import React, { useState } from 'react';\r\nimport Sentiment from 'sentiment';\r\nconst sentiment = new Sentiment();\r\n\r\n\r\nfunction TextAnalyzer() {\r\n    \r\n\r\n    const [sentimentScore, setSentimentScore] = useState(null);\r\n    const [sentimentType, setSentimentType] = useState(null);\r\n    const [sentimentPostive, setSentimentPositive] = useState([]);\r\n    const [sentimentNegative, setSentimentNegative] = useState([]);\r\n\r\n    const getSentiment = (text) => {\r\n        let sentimentObj = sentiment.analyze(text);\r\n        let score = sentimentObj.score;\r\n        let positive = sentimentObj.positive;\r\n        let negative = sentimentObj.negative;\r\n        setSentimentPositive(positive);\r\n        setSentimentNegative(negative);\r\n\r\n        if (score > 0)   setSentimentType(\"Positive\");\r\n        else if (score < 0) setSentimentType(\"Negative\");\r\n        else    setSentimentType(\"Neutral\");\r\n\r\n        setSentimentScore(score);\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"container text-center mt-5\">\r\n            <h2>Sentiment Analysis</h2>\r\n            <p>Enter your text and check its sentiment.</p>\r\n\r\n            <textarea className=\"form-control w-75 m-auto\" rows=\"7\" onChange={e=>getSentiment(e.target.value)}></textarea>\r\n            <br />\r\n            <h5>Setiment Score : {sentimentScore}</h5>\r\n            <h5>Setiment Type : {sentimentType}</h5>\r\n            <div className=\"row\">\r\n                <div className=\"col-12 col-sm-12 col-md-4 offset-md-2\">\r\n                    <h5>Positives : </h5> {sentimentPostive.map(element => {\r\n                    return(<h5><span className=\"badge badge-info p-2 shadow\">{element}</span></h5>)\r\n                    })}\r\n                </div>\r\n                <div className=\"col-12 col-sm-12 col-md-4\">\r\n                    <h5>Negatives : </h5> {sentimentNegative.map(element => {\r\n                    return(<h5><span className=\"badge badge-warning p-2 shadow\">{element}</span></h5>)\r\n                    })}\r\n                </div>\r\n            </div>\r\n          \r\n          \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TextAnalyzer\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport Navbar from './components/Navbar';\r\nimport OCR from './OCR';\r\nimport TTS from './TTS';\r\nimport TextAnalyzer from './TextAnalyzer';\r\n\r\n\r\nfunction App(props) {\r\n  console.log(props)\r\n\r\n  return (\r\n    <>\r\n      <React.Fragment>\r\n        <Router>\r\n          <Navbar />\r\n\r\n\r\n          <div className=\"container border shadow pb-5\" style={{ marginTop : '120px'}}>\r\n            <div className=\"row\">\r\n              {/* <div className=\"col-3\" style={{ paddingLeft: '0px' }}>\r\n                <Navbar />\r\n              </div> */}\r\n              <div className=\"col-12\">\r\n\r\n                <Switch>\r\n                  <Route path=\"/ocr\" exact component={OCR} />\r\n                  <Route path=\"/tts\" component={TTS} />\r\n                  <Route path=\"/textAnalyzer\" component={TextAnalyzer} />\r\n                  <Route path=\"/\" component={OCR} />\r\n                </Switch>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n\r\n        </Router>\r\n      </React.Fragment>\r\n    </>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}